using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libblossom5int32"], :_jl_blossom5int32),
    LibraryProduct(prefix, ["libblossom5float64"], :_jl_blossom5float64),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/BlossomVBuilder/releases/download/v2.0.5-2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/BlossomV.v2.5.0.aarch64-linux-gnu.tar.gz", "c4b126f746c93fdc6820bfb81e36fbb73493c94db496515eb38a4d7dbbff598a"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/BlossomV.v2.5.0.aarch64-linux-musl.tar.gz", "efb2907bb2a80917380848a04b55164676b8a0c6f69d045a7b43323af008ae06"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/BlossomV.v2.5.0.arm-linux-gnueabihf.tar.gz", "9b84c1ce2fe6d5908a62388b9a744dd8deef8c021e0f6a5ff50963f311555b85"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/BlossomV.v2.5.0.arm-linux-musleabihf.tar.gz", "fe20180089f40dcaefa224beaa14bdd0b6a9334c8dc01f47c404331bda4a318b"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/BlossomV.v2.5.0.i686-linux-gnu.tar.gz", "42f84fc9e5e5a37745ee743f99220bca2e64f590c282ed92083a76b7017cabff"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/BlossomV.v2.5.0.i686-linux-musl.tar.gz", "513f9cb8d15e9714ecd7e25f0efc2805e8a5a7412b93964f0071329fa088479e"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/BlossomV.v2.5.0.powerpc64le-linux-gnu.tar.gz", "022d000fe1466c7bad3d58acc783abf039a6394c301fc50a1243a3aea0e126d1"),
    MacOS(:x86_64) => ("$bin_prefix/BlossomV.v2.5.0.x86_64-apple-darwin14.tar.gz", "4172ddccc3a9b4ea65a060226a02ff2987b7342d3891b0a97b0a61708f76917f"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/BlossomV.v2.5.0.x86_64-linux-gnu.tar.gz", "dae0d63cdfcb729bb08dfc3e955bb67d0070e67e4427155ec95b936fd24dabfd"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/BlossomV.v2.5.0.x86_64-linux-musl.tar.gz", "360338db1f63445eb5702b9bad400e876d919a9e0ceaa6081c9182301f4fa4c2"),
    FreeBSD(:x86_64) => ("$bin_prefix/BlossomV.v2.5.0.x86_64-unknown-freebsd11.1.tar.gz", "b30eba3a341b965d0c38d1cd5ef678a48c664a40c724de2a0b9d78e572e4d82e"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
